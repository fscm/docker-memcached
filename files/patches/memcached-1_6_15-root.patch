--- memcached.c.orig	2022-03-31 12:57:04.000000000 +0100
+++ memcached.c	2022-03-31 13:01:33.000000000 +0100
@@ -3915,7 +3915,6 @@
 #endif
     printf("-d, --daemon              run as a daemon\n"
            "-r, --enable-coredumps    maximize core file limit\n"
-           "-u, --user=<user>         assume identity of <username> (only when run as root)\n"
            "-m, --memory-limit=<num>  item memory in megabytes (default: %lu)\n"
            "-M, --disable-evictions   return error on memory exhausted instead of evicting\n"
            "-c, --conn-limit=<num>    max simultaneous connections (default: %d)\n"
@@ -4668,7 +4667,6 @@
     bool do_daemonize = false;
     bool preallocate = false;
     int maxcore = 0;
-    char *username = NULL;
     char *pid_file = NULL;
     struct passwd *pw;
     struct rlimit rlim;
@@ -5028,7 +5026,7 @@
             }
             break;
         case 'u':
-            username = optarg;
+            fprintf(stderr, "'-u' and '--username' options ignored\n");
             break;
         case 'P':
             pid_file = optarg;
@@ -5795,14 +5793,6 @@
 
     /* lose root privileges if we have them */
     if (getuid() == 0 || geteuid() == 0) {
-        if (username == 0 || *username == '\0') {
-            fprintf(stderr, "can't run as root without the -u switch\n");
-            exit(EX_USAGE);
-        }
-        if ((pw = getpwnam(username)) == 0) {
-            fprintf(stderr, "can't find the user %s to switch to\n", username);
-            exit(EX_NOUSER);
-        }
         if (setgroups(0, NULL) < 0) {
             /* setgroups may fail with EPERM, indicating we are already in a
              * minimally-privileged state. In that case we continue. For all
@@ -5817,10 +5807,6 @@
                 exit(EX_OSERR);
             }
         }
-        if (setgid(pw->pw_gid) < 0 || setuid(pw->pw_uid) < 0) {
-            fprintf(stderr, "failed to assume identity of user %s\n", username);
-            exit(EX_OSERR);
-        }
     }
 
     /* Initialize Sasl if -S was specified */
